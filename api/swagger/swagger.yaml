swagger: '2.0'
info:
  version: '1.0.0'
  title: Incode Internship Backend
  description: Documentation for shop API
host: localhost:8000
schemes:
  - http
paths:
###############################################################################
# PING
  /ping:
    get:
      summary: Check status of server
      tags: 
        - Basic
      operationId: 'pingServer'
      responses:
        200:
          description: 'Greetings from server'
          schema:
            type: string
            example: hello
          
###############################################################################
# AUTHENTICATION
  /auth:
    post:
      summary: Creates a new user
      operationId: registerUser
      tags: 
        - Auth
      produces:
        - 'application/json'
      consumes:
        - 'application/json'
      parameters:
      - in: body
        name: body
        required: true
        description: Data to register a user(unique login and password)
        schema:
          $ref: '#/definitions/registerdata'
      responses:
        200:
          description: Returns a generated token data
          schema:
            $ref: '#/definitions/successAuth'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
  /login:
    post:
      summary: Login as an existing user
      tags: 
        - Auth
      parameters:
      - in: body
        name: body
        required: true
        description: Login data (login and password)
        schema:
          $ref: '#/definitions/registerdata'
      responses:
        200:
          description: Returns a generated token data
          schema:
            $ref: '#/definitions/successAuth'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        403:
          description: Passwords don't match
          schema:
            $ref: '#/definitions/failedResponse'
  /user:
    get:
      summary: Get user by token
      tags: 
        - Auth
      security:
      - Bearer: []
      responses:
        200:
          description: User object
          schema:
            $ref: '#/definitions/userdata'
###############################################################################                
#PRODUCTS

  /products:
    get:
      summary: Get all products
      tags: 
        - Products
      security: 
      - Bearer: []
      parameters:
      - in: query
        name: category
        required: false
        type: string
        description: category name to get products of
      - in: query
        name: price
        required: false
        type: string
        description: price limitations i.e. 0 to 100
      - in: query
        name: stock
        required: false
        type: number
        description: lowest quantity of products
      responses:
        200:
          description: Array of requested products
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              products:
                type: array
                items:
                  $ref: '#/definitions/product'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'

    post:
      summary: Create a product
      tags: 
        - Products
      security: 
      - Bearer: []
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/productToCreate'  
      responses:
        200:
          description: Created Product
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              product:
                type: object
                $ref: '#/definitions/product'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'

  /products/{id}:
    get:
      summary: Get a single product by ID
      tags: 
        - Products
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of product
      responses:
        200:
          description: Product with passed ID
          schema:
            type: object
            properties: 
              success:
                type: boolean
                example: true
              product:
                type: object
                $ref: '#/definitions/product'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    put:
      summary: Update a single product
      tags: 
        - Products
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of products
      - in: body
        name: product
        description: updated product
        schema:
          $ref: '#/definitions/productToCreate'
      responses:
        200:
          description: Product with passed ID
          schema:
            $ref: '#/definitions/product'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'
    delete:
      summary: Delete a single product
      tags: 
        - Products
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of products
      responses:
        200:
          description: Object with a success key
          schema:
            type: object
            properties:
              success:
                type: boolean
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'
###############################################################################
# CATEGORIES
  /categories:
    get:
      summary: Get all categories
      tags: 
        - Categories
      security: 
      - Bearer: []
      parameters: 
      - in: query
        name: category
        required: false
        type: string
        description: get category by name
      responses:
        200:
          description: Array of Categories
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              categories:
                type: array
                items:
                  $ref: '#/definitions/category'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
    post:
      summary: Create a category
      tags: 
        - Categories
      security: 
      - Bearer: []
      parameters:
        - in: body
          name: category
          description: category to be created
          schema:
            $ref: '#/definitions/categoryToCreate'
      responses:
        200:
          description: Created Category
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/category'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'

  /categories/{id}:
    get:
      summary: Get a single category by id
      tags: 
        - Categories
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of category
      responses:
        200:
          description: Category with passed ID
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/category'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    put:
      summary: Update a single category
      tags:
        - Categories
      security:
      - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: id of cateogory
        - in: body
          name: category
          description: category to be created
          schema:
            $ref: '#/definitions/categoryToCreate'
      responses:
        200:
          description: Category with passed ID
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/category'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    delete:
      summary: Delete a single category
      tags: 
        - Categories
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of cateogory
      responses:
        200:
          description: Object with a success key
          schema:
            type: object
            properties:
              success:
                type: boolean
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

  /categories/{id}/count:
    get:
      summary: Returns a count of products in a category
      tags:
        - Categories
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: id of category
      responses:
        200:
          description: Object representing product count of a specified category
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              count:
                type: integer
                example: 1
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'

##############################################################################
# ORDERS

  /orders:
    get:
      summary: Get all orders
      tags: 
        - Orders
      security: 
      - Bearer: []
      responses:
        200:
          description: Array of Orders
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              orders:
                type: array
                items:
                  $ref: '#/definitions/order'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
    post:
      summary: Create an order
      tags: 
        - Orders
      security: 
      - Bearer: []
      parameters:
        - in: body
          name: order
          description: order to be created
          schema:
            $ref: '#/definitions/orderToCreate'
      responses:
        200:
          description: Created Order
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/order'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'

  /orders/{id}:
    get:
      summary: Get a single order by id
      tags: 
        - Orders
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of order
      responses:
        200:
          description: Order with passed ID
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/order'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    put:
      summary: Update a single order
      tags:
        - Orders
      security:
      - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: id of order
        - in: body
          name: order
          description: order to be created
          schema:
            $ref: '#/definitions/orderToCreate'
      responses:
        200:
          description: Order with passed ID
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/order'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    delete:
      summary: Delete a single order
      tags: 
        - Orders
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of order
      responses:
        200:
          description: Object with a success key
          schema:
            type: object
            properties:
              success:
                type: boolean
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

##############################################################################
# WISHLISTS

  /wishlists:
    get:
      summary: Get all wishlist
      tags: 
        - Wishlist
      security: 
      - Bearer: []
      responses:
        200:
          description: Array of Wishlists
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              wishlists:
                type: array
                items:
                  $ref: '#/definitions/wishlist'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
    post:
      summary: Create wishlist
      tags: 
        - Wishlist
      security: 
      - Bearer: []
      parameters:
        - in: body
          name: wishlist
          description: wishlist to be created
          schema:
            $ref: '#/definitions/wishlistToCreate'
      responses:
        200:
          description: Created Wishlist
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/wishlist'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'

  /wishlists/{id}:
    get:
      summary: Get a single wishlist by User id
      tags: 
        - Wishlist
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of a user
      responses:
        200:
          description: Wishlist with passed User ID
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/wishlist'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    put:
      summary: Update a single wishlist
      tags:
        - Wishlist
      security:
      - Bearer: []
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: id of a user
        - in: body
          name: wishlist
          description: wishlist to be created
          schema:
            $ref: '#/definitions/wishlistToCreate'
      responses:
        200:
          description: Wishlist with passed User ID
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              category:
                type: object
                $ref: '#/definitions/wishlist'
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'

    delete:
      summary: Delete a single wishlist
      tags: 
        - Wishlist
      security: 
      - Bearer: []
      parameters: 
      - in: path
        name: id
        required: true
        type: string
        description: id of a user
      responses:
        200:
          description: Object with a success key
          schema:
            type: object
            properties:
              success:
                type: boolean
        400:
          description: Error occured see the error field in response
          schema:
            $ref: '#/definitions/failedResponse'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/failedResponse'


###############################################################################
# GENERAL DEFINITIONS
definitions:
  registerdata:
    type: object
    required:
    - login
    - password
    properties:
      login:
        type: string
        example: user
      password: 
        type: string
        example: password
  successAuth:
    type: object
    properties:
      success:
        type: boolean
        default: true
      iat:
        type: integer
        example: 1534924678
      exp:
        type: integer
        example: 1534924678
      token:
        type: string
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6InRlc3QxIiwicGFzc3dvcmQiOiIkMmIkMTIkSXVDaUVNRlRpTElMSERmNmxVbGJKT0ExWmxzLmNCOVUzVHFWV2pUV25pQlFDSzk1NDhNM20iLCJfaWQiOiI1YjdkMTc4NjU5MGYyMzYyNWY3ZTBjZjgiLCJpZCI6IjViN2QxNzg2NTkwZjIzNjI1ZjdlMGNmOCIsImlhdCI6MTUzNDkyNDY3OCwiZXhwIjoxNTM0OTI3Mzc4fQ.uUrXvlAh-4kl--PaUh13koGJWG5aeLzM71qH8WZGbqc'
  failedResponse:
    type: object
    properties:
      success: 
        type: boolean
        default: false
      error: 
        type: string
        example: Error string representing what went wrong
  authdata:
    type: object
    properties:
      token:
        type: string
      iat:
        type: integer
      exp:
        type: integer
  userdata:
    type: object
    properties:
      id: 
        type: string
        example: 5b7d1786590f23625f7e0cf8
      login:
        type: string
        example: user
      password:
        type: string
        description: hashed password
        example: $2b$12$IuCiEMFTiLILHDf6lUlbJOA1Zls.cB9U3TqVWjTWniBQCK9548M3m
      iat:
        type: number
        example: 1534924678
      exp: 
        type: number
        example: 1534924678
  product:
    type: object
    properties:
      id:
        type: string
        example: 5b85097083d82c2de542be4b
      title:
        type: string
      description:
        type: string
      category_id:
        type: string
      category_title:
        type: string
      price: 
        type: integer
        example: 99.99
      stock:
        type: integer
        example: 1
      thumbnail:
        type: string
  productToCreate:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      category_title:
        type: string
      thumbnail:
        type: string
      price: 
        type: integer
      stock:
        type: integer
  category:
    type: object
    properties:
      id: 
        type: string
      title:
        type: string
      description:
        type: string
  categoryToCreate:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
  orderToCreate:
    type: object
    properties:
      date:
        type: integer
        description: date of an order creation
        example: 1535545788254
      client:
        description: user object
        type: object
        $ref: '#/definitions/userdata'
      total: 
        type: number
        example: 99.99
        description: total sum of all the items in order
      items:
        type: object
        description: an object where keys are the ids of products
        properties: 
          5b85097083d82c2de542be4b:
            type: object
            description: Object representing product and quantity
            properties:
              product:
                $ref: '#/definitions/product'
              quantity: 
                type: integer
                example: 1
  
  order:
    type: object
    properties:
      id:
        type: string
      date:
        type: integer
        description: date of an order creation
        example: 1535545788254
      client:
        description: user object
        type: object
        $ref: '#/definitions/userdata'
      total: 
        type: number
        example: 99.99
        description: total sum of all the items in order
      items:
        type: object
        description: an object where keys are the ids of the products
        properties: 
          5b85097083d82c2de542be4b:
            type: object
            description: Object representing product and quantity
            properties:
              product:
                $ref: '#/definitions/product'
              quantity: 
                type: integer
                example: 1

  wishlist:
    type: object
    properties:
      id:
        type: string
      client:
        description: user object
        type: object
        $ref: '#/definitions/userdata'
      items:
        type: array
        items:
          $ref: '#/definitions/product'

  wishlistToCreate:
    type: object
    properties:
      client:
        description: user object
        type: object
        $ref: '#/definitions/userdata'
      items:
        type: array
        items:
          $ref: '#/definitions/product'

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
###############################################################################
# TAGS
tags:

  - name: Auth
    description: Authentication
  
  - name: Basic
    description: Basic things

  - name: Products
    description: Products in store

  - name: Categories
    description: Categories of products
  
  - name: Orders
    description: Shop Orders

  - name: Wishlist
    description: Wishlists